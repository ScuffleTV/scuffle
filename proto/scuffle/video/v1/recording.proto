syntax = "proto3";

package scuffle.video.v1;

import "scuffle/video/v1/types/recording.proto";
import "scuffle/types/ulid.proto";
import "scuffle/video/v1/types/tags.proto";
import "scuffle/video/v1/types/search_options.proto";
import "scuffle/video/v1/types/failed_resource.proto";
import "scuffle/video/v1/types/visibility.proto";

// This service allows for the modification and deletion of recordings.
// Recordings cannot be created through this service. They are created
// automatically when a room is streamed to and a recording configuration
// attached.
service Recording {
  // Get a list of recordings.
  rpc Get(RecordingGetRequest) returns (RecordingGetResponse) {}

  // Modify an existing recording.
  rpc Modify(RecordingModifyRequest) returns (RecordingModifyResponse) {}

  // Delete existing recordings.
  rpc Delete(RecordingDeleteRequest) returns (RecordingDeleteResponse) {}

  // Tag an existing recording.
  rpc Tag(RecordingTagRequest) returns (RecordingTagResponse) {}

  // Untag an existing recording.
  rpc Untag(RecordingUntagRequest) returns (RecordingUntagResponse) {}
}

// The request payload for Recording.Get.
message RecordingGetRequest {
  // A list of ids to retrieve. If empty, all recordings will be returned.
  // If not empty, only the recordings with the specified ids will be returned.
  // This will be filtered by the search_options. (max: 100, min: 0)
  repeated scuffle.types.Ulid ids = 1;

  // Optionally filter the recordings by room_id.
  optional scuffle.types.Ulid room_id = 2;

  // Optionally filter the recordings by recording_config_id.
  optional scuffle.types.Ulid recording_config_id = 3;

  // Optionally filter the recordings by s3_bucket_id.
  optional scuffle.types.Ulid s3_bucket_id = 4;

  // Optionally filter visibility status of the recordings.
  optional types.Visibility visibility = 5;

  // Optionally filter the recordings by their deleted status.
  // If true, only deleted recordings will be returned.
  // When a recording is deleted via Recording.Delete, it is not actually
  // deleted immediately. The deletion is asynchronous and will happen sometime
  // after the request. Deleted recordings are not recoverable this shows
  // deletion jobs that have not yet completed. Deleted recordings will not have
  // a room_id or recording_config_id.
  optional bool deleted = 6;

  // An optional set of search options to filter the results by.
  optional types.SearchOptions search_options = 7;
}

// The response payload for Recording.Get.
message RecordingGetResponse {
  // The list of recordings that were retrieved.
  repeated types.Recording recordings = 1;
}

// The request payload for Recording.Modify.
message RecordingModifyRequest {
  // The id of the recording to modify.
  scuffle.types.Ulid id = 1;

  // Optionally set a new room_id for the recording.
  optional scuffle.types.Ulid room_id = 2;

  // Optionally set a new recording_config_id for the recording.
  optional scuffle.types.Ulid recording_config_id = 3;

  // Optionally set change the visibility of the recording.
  optional types.Visibility visibility = 4;

  // Optionally set new tags for the recording.
  optional types.Tags tags = 5;
}

// The response payload for Recording.Modify.
message RecordingModifyResponse {
  // The recording that was modified.
  types.Recording recording = 1;
}

// The request payload for Recording.Delete.
message RecordingDeleteRequest {
  // The ids of the recordings to delete.
  repeated scuffle.types.Ulid ids = 1;
}

// The response payload for Recording.Delete.
message RecordingDeleteResponse {
  // The ids of the recordings that were deleted.
  repeated scuffle.types.Ulid ids = 1;

  // The the recordings that failed to deleted.
  repeated types.FailedResource failed_deletes = 2;
}

// The request payload for Recording.Tag.
message RecordingTagRequest {
  // The id of the recording to tag.
  scuffle.types.Ulid id = 1;

  // The tags to apply to the recording.
  types.Tags tags = 2;
}

// The response payload for Recording.Tag.
message RecordingTagResponse {
  // The new tags on the recording.
  types.Tags tags = 1;
}

// The request payload for Recording.Untag.
message RecordingUntagRequest {
  // The id of the recording to untag.
  scuffle.types.Ulid id = 1;

  // The tags to remove from the recording.
  repeated string tags = 2;
}

// The response payload for Recording.Untag.
message RecordingUntagResponse {
  // The new tags on the recording.
  types.Tags tags = 1;
}
